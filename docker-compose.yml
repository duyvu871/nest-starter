services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: nest_starter_app
    env_file:
      - .env.production
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "docker-health-check.js"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    volumes:
      - ./:/app
    profiles:
      - app-prod
  db:
    image: postgres:16
    container_name: nest_starter_pg
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "127.0.0.1:${PROD_DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  redis:
    image: redis:7-alpine
    container_name: nest_starter_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    env_file:
      - .env.production
    ports:
      - "127.0.0.1:${REDIS_DB_PORT}:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  app-network:
    driver: bridge